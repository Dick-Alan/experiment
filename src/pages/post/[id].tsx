import { type NextPage } from "next";
import Image from "next/image";
import Head from "next/head";
import Link from "next/link";
import { SignIn, SignInButton, SignOutButton, useUser } from "@clerk/nextjs";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import { LoadingPage, LoadingSpinner } from "../../components/loading";
import { useState } from "react";
import toast from "react-hot-toast";
import { CommentView } from "~/components/commentview";
dayjs.extend(relativeTime);

import { api } from "~/utils/api";
import type { RouterOutputs } from "~/utils/api";

import type { GetStaticProps } from "next";

import { PageLayout } from "~/components/layout";

const SinglePostPage: NextPage<{ id: string }> = ({ id }) => {
  const { data } = api.posts.getById.useQuery({
    id,
  });
  const [input, setInput] = useState("");
  const ctx = api.useContext();
  const { mutate, isLoading: isPosting } = api.posts.createComment.useMutation({
    onSuccess: () => {
      setInput("");
      void ctx.posts.getCommentsByPostId.invalidate();
    },
    onError: (e) => {
      const errorMessage = e.data?.zodError?.fieldErrors.content;
      if (errorMessage && errorMessage[0]) {
        toast.error(errorMessage[0]);
      } else {
        toast.error("Failed to post comment");
      }
    },
  });
  const user = useUser();
  const postId = id;
  const comments = api.posts.getCommentsByPostId.useQuery({
    postId,
  }).data;

  if (!data) return <div>404</div>;
  console.log(comments);
  return (
    <>
      <Head>
        <title>{`${data.post.content ?? ""} - ${
          data.author.username ?? ""
        }`}</title>
        <meta name="description" content="Generated by create-t3-app" />
      </Head>
      <PageLayout>
        <PostView {...data} />
        <div className="">
          {comments?.map((e) => (
            <CommentView
              comment={{
                id: e.comment.id,
                createdAt: e.comment.createdAt,
                postId: e.comment.postId,
                content: e.comment.content,
                authorId: e.author.id,
              }}
              author={e.author}
            />
          ))}
        </div>

        <div className="fixed bottom-0 left-1/2 z-50  -translate-x-1/2 transform rounded-md  border bg-black px-10">
          <input
            className=" m-1  h-12 grow rounded-sm bg-gray-900  p-1 outline-none"
            placeholder="Type comment"
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === "Enter") {
                e.preventDefault();
                if (input !== "") {
                  mutate({ content: input, postId: postId });
                }
              }
            }}
          ></input>
          {input !== "" && !isPosting && (
            <button
              className="rounded-md bg-gray-800 p-1 hover:border hover:border-slate-100"
              onClick={() => mutate({ content: input, postId: postId })}
            >
              post comment
            </button>
          )}
        </div>
      </PageLayout>
    </>
  );
};

import { generateSsgHelper } from "~/server/helpers/ssgHelper";
import { PostView } from "~/components/postview";
import { time } from "console";
import { comment } from "postcss";

export const getStaticProps: GetStaticProps = async (context) => {
  const ssg = generateSsgHelper();

  const id = context.params?.id;
  if (typeof id !== "string") throw new Error("no username");

  await ssg.posts.getById.prefetch({ id });

  return {
    props: {
      trpcState: ssg.dehydrate(),
      id,
    },
  };
};
export const getStaticPaths = () => {
  return { paths: [], fallback: "blocking" };
};

export default SinglePostPage;
